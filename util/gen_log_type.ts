// generate types from resources/netlog_defs.ts.
import * as fs from 'node:fs';

import { exec } from '@actions/exec';

import latestLogDef from '../resources/netlog_defs';

const main = async () => {
  let generated =
    '// Auto-generated from util/gen_log_type.ts\n// DO NOT EDIT THIS FILE DIRECTLY\n\n';

  generated += 'export type LogDefinitionTypes = ';

  generated += Object.keys(latestLogDef).map((x) => `'${x}'`).join(' | ') + ';\n';

  generated += `
export type NetFields = {
`;

  Object.entries(latestLogDef).forEach(([key, value]) => {
    generated += `${key}: ${JSON.stringify(value.fields)},\n`;
  });

  generated += '};\n';

  generated += `
export type NetFieldsReverse = {
`;

  Object.entries(latestLogDef).forEach(([key, value]) => {
    generated += `${key}: {\n`;

    Object.entries(value.fields).forEach(([k, v]) => {
      generated += `${v.toString()}: ${JSON.stringify(k)},`;
    });

    generated += '},\n';
  });

  generated += '};\n';

  fs.writeFileSync('./types/net_fields_gen.d.ts', generated, { encoding: 'utf8' });

  await exec('npx dprint fmt');
};

main().catch((e) => {
  throw e;
});
